////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end) {
  //init internal array to contain all numbers from start up to AND INCLUDING end
 var arr = [];
 //return empty array if start === end
 if (start === end){
   return [];
 }
 else if (start < end){
 //sum function to return sum total of all values in array
      for (var i = start; i <= end; i++){
        arr.push(i);
      }
 }
 else if (start > end){
      for (var i = end; i <= start; i++){
        arr.push(i);
      }
 }
 return arr;
};

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
  var total = 0;
  
  if(!array.length){
    return 0;
  }
  else {
    for (var i = 0; i < array.length; i++){
      total += array[i];
    }
  }
    return total;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
  var returnArray = [];
  
  if (!array.length){
    return [];
  }
  else {
    for (var i = array.length - 1; i >= 0; i--){
      returnArray.push(array[i]);
    }
  }
  
    return returnArray;
  
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
  
  if(!array.length){
    return [];
  }
  else {
    //we can use .reverse in this one
    array.reverse();
  }
    
  return array;

}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  //set to null so last rest instance is null
  let list = null;
  
  for (var i = array.length - 1; i >= 0; i--){
    //why do we start backwards? 
    //builds out last value with 3, then nests that object with 2, 1, etc. 
    list = { value: array[i], rest: list };
  }
  
  return list;

}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list) {
  var arr = [];
       //start cond. = list.  //stop condition when node = null //update value to = the next node.rest
       //memorize this, because this is another stupid one. 
  for (var node = list; node; node = node.rest){
    arr.push(node.value);
  }
  return arr;
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend() {

}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth() {

}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(val1, val2) {

  


}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
