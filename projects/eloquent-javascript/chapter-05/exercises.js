// /////////////////////////////////////////////////////////////////////////////
// flatten /////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////
//exercises on page 99

//use reduce, pg 92 in EQJS

/*
I: a nested array and a function
O: single array with all elements from nested array
C: use reduce method on pg 92
E: Is array an array?
   Is array.length < 0?
*/

//I think the .flat() function does this too

function flatten(array) {
  return array.reduce((flatArray, current) => flatArray.concat(current), []);

};

// /////////////////////////////////////////////////////////////////////////////
// loop ////////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function loop(start, test, update, body) {
  for (let value = start; test(value); value = update(value)) {
    body(value);
  }
}

// /////////////////////////////////////////////////////////////////////////////
// every ///////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function every(array, test) {
  for (let arrValue of array) { //iterates through array using a for of loop
    if (!test(arrValue)) return false; //exits loop first time test fails
  }
  return true; // if test fails to fail, function returns true
}

// /////////////////////////////////////////////////////////////////////////////
// dominantDirection ///////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function dominantDirection(str) {
  
  const arr = countBy(str, function(char){
    //get the unicode value for the current character
    const unicode = char.charCodeAt();
    // find the script obj from the unicode character
    const script = characterScript(unicode);
    // returning the name of the script direction or null
    
    if(script !== null) {
      return script.direction;
    } 
    else {
      return script;
    }
  });
  
  //find the next highest count by sorting
  arr.sort(function(a, b) {
    return b.count - a.count; //need to append with .count else will sort first digit first
  });
  
  return arr[0].name; //returns dominant result
  
}

// /////////////////////////////////////////////////////////////////////////////
//  //////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    flatten,
    loop,
    every,
    dominantDirection,
  };
};
